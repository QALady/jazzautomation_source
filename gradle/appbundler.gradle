/////////////// This is the section of Gradle which uses the AppBundler. ///////////////////////
/////////////// Note that AppBundler requires you to create your own icons /////////////////////
/////////////// It may do a better job of making an .exe for Windows  //////////////////////////
/////////////// i.e., not require a windows machine to make the exe ////////////////////////////

apply plugin: 'application'

configurations {
  bundleapp
  launch4j
  jre
}

repositories {
  ivy {
    artifactPattern "http://www.nurflugel.com/Home/repository/[organisation]/[module]/[revision]/[artifact]-[revision].[type]"
    ivyPattern      "http://www.nurflugel.com/Home/repository/[organisation]/[module]/[revision]/[artifact]-[revision].ivy.xml"
  }
}

dependencies {
  bundleapp "com.oracle:appbundler:1.0"
  jre group: 'com.oracle', name: 'jdk_osx',     version: '1.7.0_40', ext: 'zip'
  jre group: "com.oracle", name: "jdk_windows", version: "1.7.0_40", ext:"zip"
}


// create the dirs needed
File distDir=new File("${buildDir}/distWin64")
distDir.mkdirs()
distDir=new File("$buildDir/distOsX")
distDir.mkdirs()

// Mac Release - from https://github.com/anathema/anathema/blob/master/build.gradle
task createLauncherMac(dependsOn: installApp) << {
def appName = project.ext.get('osx_app_name')
    ant.taskdef(
            name: "bundleapp",
            classname: "com.oracle.appbundler.AppBundlerTask",
            classpath: configurations.bundleapp.asPath
    )
    mkdir("${buildDir}/distOsX")
    ant.bundleapp(
            outputdirectory: "${buildDir}/distOsX",
            name: appName,
            displayname:  appName,
            identifier: "com.jazzautomation",
            icon: "src/main/resources/JA_app_logo.icns", //opt
//            icon: "gradle/logos/logoWhite2.icns", //opt
//            shortversion: "${versionString}", //opt
//            signature: "????", //opt
            //copyright: blah , //opt
            applicationCategory: "public.app-category.utilities", //opt
//            mainclassname: "com.jazzautomation.ui.javafx.MainFxUi"  // JavaFX class - note that there's something which prevents the UI from showing with this.
            mainclassname: "com.jazzautomation.ui.MainUi"             // Swing class - runs fine.
      ) {
        runtime(dir: "build/jre/osx/jdk1.7.0_40.jdk/Contents/Home") //opt - one way to get around who's got what - put the JRE into source control
//        runtime(dir: "$javaHomeDir") //opt
//
        classpath(dir: "${buildDir}/install/${rootProject.name}/lib/")
        classpath(file: "src/main/resources/smallJazzAutomation1.png")
        classpath(file: "src/main/resources/JA_Red_Logo_Extended_1282x398.png")
//        classpath(file: "$javaHomeDir/jre/lib/jfxrt.jar")
//        classpath(file: "src/main/resources/FobIcon.png")
      
      
//        classpath(dir: "${buildDir}/dependencies/")
//        classpath(dir: "${buildDir}/plugins/")

        option(value: "-splash:\$APP_ROOT/Contents/Java/JA_Red_Logo_Extended_1282x398.png")    // splash screen 
//        option(value: "-splash:\$APP_ROOT/Contents/Java/smallJazzAutomation1.png")
        option(value: "-Dapple.laf-useScreenMenuBar=true")
        option(value: "-Djazz.configs=examples/bestBuyExample")
        option(value: "-Dfeatures=AddToCart,CheckoutAsGuest")
//        option(value: "-Ddefaultrepository=%USER_HOME%/Library/Application Support/Anathema")
    }
}


// JRE archive download and explosion into build folder
task prepareWinJRE(type: Copy) {
    def target = new File('build/jre/win64');
    into target
    from { zipTree( "${buildDir}/zippedJre/jdk_windows-1.7.0_40.zip") }
    onlyIf { !target.exists() }
    doLast {
        ant.delete(includeemptydirs: true, quiet: true) {
            fileset(dir: buildDir, includes: "tmp/expandedArchives/jre-win32*/**", defaultexcludes: false)
        }
    }
}

task prepareMacJRE(type: Copy) {
    def target = new File('build/jre/osx');
    into target
    from { zipTree( "${buildDir}/zippedJre/jdk_osx-1.7.0_40.zip") }
    onlyIf { !target.exists() }
    doLast {
        ant.delete(includeemptydirs: true, quiet: true) {
            fileset(dir: buildDir, includes: "tmp/expandedArchives/jre-mac64*/**", defaultexcludes: false)
        }
    }
}

task stageJREs(type: Copy, description: "Get the JREs out of Gradle's dependency cache and put them where we can find them") {
  from configurations.jre
  into 'build/zippedJre'
}



task listJars << {
    configurations.each {
      Configuration configuration -> configuration.each { 
        File file -> println "$configuration \t $file.name"; 
      }
  }
}


task prepareSingleJar(type: Jar, description: "Put all the classes into a single jar so it can be wrapped in the .exe") {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.resources)    
    from configurations.runtime.asFileTree.files.collect { zipTree(it) }
//    from configurations.runtime.asFileTree.files.collect { zipTree(it) }.remove("smallJazzAutomation1.png")

    manifest {
        attributes 'Main-Class': 'com.jazzautomation.ui.MainUi'
    }
}

task copyWin64Jre(type: Copy ){
  from "build/jre/win64/jdk1.7.0_40/jre"
  into "build/distWin64/jre"
}


// this requires something like 
//      export EXE4J_HOME=~/Downloads/exe4j
// in your .profile file
task createLauncherWin <<{
  def exe4jHome = "$System.env.EXE4J_HOME"
  println "Setting for EXE4J_HOME is: $exe4jHome"
  if(exe4jHome.toString().equals("null")){
    throw new GradleException("EXE4J_HOME _must_ be set in your system properties if you're going to build the Windows distribution.  Please set this and try again")
  }
  File exe4jJar=new File("$exe4jHome/bin/ant.jar")
  println "Looking here for Exej4 jar: " + exe4jJar.getAbsolutePath()

  if(!exe4jJar.exists()){
    throw new GradleException("Expected to find Exe4j in $exe4jHome, but the file $exe4jHome/bin/ant.jar was not found.  Please install Exe4j and try again") 
  }
  if(exe4jHome){
    ant.taskdef(name: 'exe4j', classpath: "$exe4jHome/bin/ant.jar", classname: "com.exe4j.Exe4JTask" ) 
    ant.exe4j (projectfile:"gradle/windows/jazz.exe4j")
  }
}
// we do this via ant's zip task so we can use the project name dynamically at runtime instead of fixed at initializtion time.
task makeOsxZip(){
}<<{
  ant.zip(destfile: "build/distributions/jazzautomationOsx_${project.ext.versionNumber}.zip") {
          fileset(dir: 'build/distOsX') 
          fileset(dir: '.', includes: 'examples/') 
      }
}

task makeWin64Zip(){
}<<{
  ant.zip(destfile: "build/distributions/jazzautomationWin64_${project.ext.versionNumber}.zip") {
          fileset(dir: 'build/distWin64') 
          fileset(dir: '.', includes: 'examples/') 
      }
}

// Big "make all" task
task createLaunchers (dependsOn: [makeWin64Zip,makeOsxZip])


// dependencies declared below, so it's tidy
makeWin64Zip.dependsOn createLauncherWin
makeOsxZip.dependsOn createLauncherMac
prepareWinJRE.dependsOn stageJREs
prepareMacJRE.dependsOn stageJREs

createLauncherWin.dependsOn prepareWinJRE, prepareSingleJar
createLauncherMac.dependsOn prepareMacJRE

copyWin64Jre.dependsOn prepareWinJRE 
makeWin64Zip.dependsOn copyWin64Jre



