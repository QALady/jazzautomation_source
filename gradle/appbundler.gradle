/////////////// This is the section of Gradle which uses the AppBundler. ///////////////////////
/////////////// Note that AppBundler requires you to create your own icons /////////////////////
/////////////// It may do a better job of making an .exe for Windows  //////////////////////////
/////////////// i.e., not require a windows machine to make the exe ////////////////////////////

apply plugin: 'application'

configurations {
  bundleapp
  launch4j
  jre
}

repositories {
  ivy {
            artifactPattern "http://www.nurflugel.com/Home/repository/[organisation]/[module]/[revision]/[artifact]-[revision].[type]"
            ivyPattern      "http://www.nurflugel.com/Home/repository/[organisation]/[module]/[revision]/[artifact]-[revision].ivy.xml"
  }
}

dependencies {
  bundleapp "com.oracle:appbundler:1.0"
  launch4j   files("gradle/launch4j/launch4j.jar")
  launch4j  'com.thoughtworks.xstream:xstream:1.4.5'
  
  jre group: 'com.oracle', name: 'jdk_osx', version: '1.7.0_40', ext: 'zip'
  jre group: "com.oracle", name: "jdk_windows", version: "1.7.0_40",ext:"zip"
  
}


project.ext {
  releaseZipName = "${project.projectname}_Zip_v${project.versionNumber}.zip"
  releaseWinName = "${project.projectname}_Win_v${project.versionNumber}.exe"
  releaseMacName = "${project.projectname}_Mac_v${project.versionNumber}.zip"
  macAppDir = "${project.projectname}.app"

}

// Mac Release - from https://github.com/anathema/anathema/blob/master/build.gradle
task createLauncherMac(dependsOn: installApp) << {
def appName = project.ext.get('osx_app_name')
    ant.taskdef(
            name: "bundleapp",
            classname: "com.oracle.appbundler.AppBundlerTask",
            classpath: configurations.bundleapp.asPath
    )
    mkdir("${buildDir}/distOsX")
    ant.bundleapp(
            outputdirectory: "${buildDir}/distOsX",
            name: appName,
            displayname:  appName,
            identifier: "com.jazzautomation",
//            icon: "src/main/resources/gradleLogo_big.icns", //opt
//            shortversion: "${versionString}", //opt
//            signature: "????", //opt
            //copyright: blah , //opt
            applicationCategory: "public.app-category.utilities", //opt
//            mainclassname: "com.jazzautomation.ui.javafx.MainFxUi"  // JavaFX class - note that there's something which prevents the UI from showing with this.
            mainclassname: "com.jazzautomation.ui.MainUi"             // Swing class - runs fine.
      ) {
        runtime(dir: "build/jre/osx/jdk1.7.0_40.jdk/Contents/Home") //opt - one way to get around who's got what - put the JRE into source control
//        runtime(dir: "$javaHomeDir") //opt
//
        classpath(dir: "${buildDir}/install/${rootProject.name}/lib/")
//        classpath(file: "$javaHomeDir/jre/lib/jfxrt.jar")
//        classpath(file: "src/main/resources/FobIcon.png")
      
      
//        classpath(dir: "${buildDir}/dependencies/")
//        classpath(dir: "${buildDir}/plugins/")

//        option(value: "-splash:\$APP_ROOT/Contents/Java/FobIcon.png")// shows image, but app hangs with no errors
        option(value: "-Dapple.laf-useScreenMenuBar=true")
        option(value: "-Djazz.configs=examples/bestBuyExample")
        option(value: "-Dfeatures=AddToCart,CheckoutAsGuest")
//        option(value: "-Ddefaultrepository=%USER_HOME%/Library/Application Support/Anathema")
    }
}


// JRE archive download and explosion into build folder
task prepareWinJRE(type: Copy) {
    def target = new File('build/jre/win64');
    into target
    from { zipTree( "build/zippedJre/jdk_windows-1.7.0_40.zip") }
    onlyIf { !target.exists() }
    doLast {
        ant.delete(includeemptydirs: true, quiet: true) {
            fileset(dir: buildDir, includes: "tmp/expandedArchives/jre-win32*/**", defaultexcludes: false)
        }
    }
}

task prepareMacJRE(type: Copy, dependsOn: "copyLibs") {
    def target = new File('build/jre/osx');
    into target
//    from { zipTree(configurations.jre.fileCollection{dep -> dep.name == "jdk1.7.0_40_osx.zip"}) }
    from { zipTree( "build/zippedJre/jdk_osx-1.7.0_40.zip") }
    onlyIf { !target.exists() }
    doLast {
        ant.delete(includeemptydirs: true, quiet: true) {
            fileset(dir: buildDir, includes: "tmp/expandedArchives/jre-mac64*/**", defaultexcludes: false)
        }
    }
}

task copyLibs(type: Copy) {
  from configurations.jre
  into 'build/zippedJre'
}

task listJars << {
    configurations.jre.each { File file -> println file.name }
}

task uiJar(type: Jar, description: "Put all the classes into a single jar so it can be wrapped in the .exe") {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.resources)    
    from configurations.runtime.asFileTree.files.collect { zipTree(it) }

    manifest {
        attributes 'Main-Class': 'com.jazzautomation.ui.MainUi'
    }
}

task importAnt()<<{
  ant.importBuild 'build.xml'
}

task copyWin64Jre(type: Copy, dependsOn: prepareWinJRE ){
  from "build/jre/win64/jdk1.7.0_40/jre"
  into "build/distWin64/jre"
}

task makeWinZip(type: Zip){
  archiveName "jazzautomationWin64.zip"
  from 'build/dist'
  from 'build/jre/win64/1.7.0_40/jre'
      into 'build/zipp'
      include 'jazzautomation.exe'
      include 'jre'
}

task createLauncherWin <<{
  
  // this requires something like 
  //      export EXE4J_HOME=~/Downloads/exe4j
  // in your .profile file
  File distDir=new File('build/distWin64')
  distDir.mkdirs()
  def exe4jHome = "$System.env.EXE4J_HOME"
  if(exe4jHome){
    ant.taskdef(name: 'exe4j', classpath: "$exe4jHome/bin/ant.jar", classname: "com.exe4j.Exe4JTask" ) 
    ant.exe4j (projectfile:"gradle/jazz.exe4j")
    
  }
}

task makeOsxZip(type: Zip){
  archiveName "jazzautomationOsx.zip"
  from 'build/distOsX'
//  include '**/*.app'
}

task makeWin64Zip(type: Zip, dependsOn: copyWin64Jre){
  archiveName "jazzautomationWin64.zip"
  from 'build/distWin64'
//  include '**/*.app'
}

//createLauncher.dependsOn unzipExe4j 
makeWin64Zip.dependsOn createLauncherWin
makeOsxZip.dependsOn createLauncherMac

createLauncherWin.dependsOn prepareWinJRE
createLauncherMac.dependsOn prepareMacJRE

task createlaunchers (dependsOn: [makeWin64Zip,makeOsxZip])

